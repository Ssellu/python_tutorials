"""
    - 함수 사용 시 주의점
      0. 정의했다고 하여 바로 실행되는 것은 아니다. 함수 호출을 꼭 해야한다.
      1. 정의(만들기)는 반드시 호출(실행) 전에 정의되어야 한다.
      2. 함수 정의는 위, 아래에 2줄 공백이 있으면 좋다.
      3. 매개변수의 개수에 맞추어 인자를 넣어야 한다. (해결 : 가변인자)
"""

########################################################################
# 0. 정의했다고 하여 바로 실행되는 것은 아니다. 함수 호출을 꼭 해야한다.
def func0():
    print(f'func0 실행')


func0()  # 호출이 이루어져야 실행됨

########################################################################
# 1. 정의(만들기)는 반드시 호출(실행) 전에 정의되어야 한다.

# func1()  # 에러!
def func1():
    print(f'func1 실행')


func1()  # 에러 안남 (결과 : func1 실행)

########################################################################
# 2. 함수 정의는 위, 아래에 2줄 공백이 있으면 좋다.
########################################################################
# 3. 매개변수의 개수에 맞추어 인자를 넣어야 한다. (해결 : 가변인자, test06_여러가지_매개변수의_모양.py 참고)
def func2(a, b):
    print(f'func2 실행. a:{a}, b:{b}')


func2(10, 20)  # 에러 안남 (결과 : func2 실행. a:10, b:20)
# func2()           # 에러  (TypeError: func2() missing 2 required positional arguments: 'a' and 'b')
# func2(10)         # 에러  (TypeError: func2() missing 1 required positional argument: 'b')
# func2(10,20,30)   # 에러  (TypeError: func2() takes 2 positional arguments but 3 were given)

########################################################################
# 4. 전역변수 호출(보기)은 가능하나 접근(수정)은 불가능하다. (해결 : global 선언, test08_global.py 참고)
var = 10


def func3():
    print(var)  # 가능


def func4():
    var = 100  # 가능  (여기서 var 는 위에 선언된 전역변수 var 와는 다른 동명의 새로운 func4()만의 지역변수 1개가 생성된다.
    # 따라서 전역변수 var 값이 변경되지 않는다.)
    print(var)  # 100


func4()  # var = 100 후 print(var) 실행 ==> 100 출력
print(var)  # 하지만 전역변수 var 는 여전히 10 이다. ==> 10 출력

