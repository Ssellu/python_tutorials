"""
    < 객체 사용 방법 >
    1. 클래스 정의 : 클래스(설계도)를 만든다.

    2. 인스턴스 생성 : 원하는 시점에 객체를 생성한다.

    3. 인스턴스 접근 : 객체에 정보를 저장하거나 메서드를 실행한다.
"""

"""
    1. 클래스 정의 : 클래스(설계도)를 만든다.
        형식)
        class 클래스명:  # 클래스 이름은 대문자로 시작하는 것이 좋다. (파이썬 작명 규칙이다.)
            def __init__(self):
                self.필드명1 = 초기값
                self.필드명2 = 초기값
                self.필드명3 = 초기값
                ...
            def 메서드명(self):
                ....
            def 메서드명(self):
                ....
            
        ** 메서드는 함수 정의 방법과 동일하다.
            단, self 라는 매개변수가 반드시 앞에 있어야 한다.
        ** 메서드 정의 순서는 상관 없다.
            메서드 내부에서 클래스 내부의 멤버변수/함수 를 사용하려면 'self.'을 붙인다.
        
    2. 인스턴스 생성 : 원하는 시점에 객체를 생성한다.
        형식)
        참조변수 = 클래스명()   # 클래스 모양을 본따 객체를 메모리에 할당한다.
                             # 그 뒤 생성된 객체의 참조주소를 참조변수에 담아야 객체 접근이 가능하다.
        (참조변수는 객체의 이름이라고 생각해도 되지만 이는 꼭 정확한 의미라고 할 수는 없다.)
                             
    3. 인스턴스 접근 : 객체에 정보를 저장하거나 메서드를 실행한다.   
        참조변수.필드명
        참조변수.메서드명()
        
        ==> 객체명.필드명 / 객체명.메서드명() 이라고 생각하면 편하지만 이또한 정확한 의미는 아니다.)
        
"""


class Person:
    def __init__(self):
        self.name = ''
        self.age = 0
        self.contact = '000-0000-0000'


p1 = Person()  # Person 모양 인스턴스 생성
p2 = Person()  # Person 모양 인스턴스 생성
p3 = Person()  # Person 모양 인스턴스 생성
p4 = None      # 참조변수 초기화에 None 을 활용할 수 있다. (객체 생성은 나중에 하고 참조변수만 준비하는 용도)

# 각 p1, p2, p3, p4 가 참조변수

print(p1)
print(p2)
print(p3)
print(p4)
"""
<__main__.Person object at 0x033CE4F0>
<__main__.Person object at 0x035AB478>
<__main__.Person object at 0x035ABB98>
None
"""
# 참조변수에는 객체의 참조값이 들어있다.

###############################################################################
# 각 객체에 정보 저장 (필드 접근)
# 형식) 참조값.멤버명
# '.' : 접근연산자 (객체의 참조값을 통해 멤버에 접근하는 연산자)
p1.name = '홍길동'
p1.age = 10
p1.contact = '010-1111-2222'

p2.name = '이푸린'
p2.age = 25
p2.contact = '010-3333-4444'

# 주의! None 인 참조변수는 '.'을 사용할 수 없다.
# p4.name = '고길동' # AttributeError: 'NoneType' object has no attribute 'name'


print(f'이름 : {p1.name}\n나이 : {p1.age}세\n연락처 : {p1.contact}')
"""
이름 : 홍길동
나이 : 10세
연락처 : 010-1111-2222
"""
print(f'이름 : {p2.name}\n나이 : {p2.age}세\n연락처 : {p2.contact}')
"""
이름 : 이푸린
나이 : 25세
연락처 : 010-3333-4444
"""
print(f'이름 : {p3.name}\n나이 : {p3.age}세\n연락처 : {p3.contact}')
"""
이름 : 
나이 : 0세
연락처 : 000-0000-0000
"""



# p1에 들어있는 참조값이 1004 이고 p2 에는 2004가 저장되어있다면
# p1.name 은 1004.name,
# p2.name 은 2004.name 이 된다.


# 주의! p1, p2, p3은 객체의 이름 대용으로 사용하지만 엄연히 객체 자체를 의미하는 것이 아니다.
# 객체의 참조값을 담고 있는 메모장의 역할일 뿐이다.
p3 = p1  # 객체의 얕은 복사 (참조값 복사)
print(f'{p1.name} {p1.age}세 {p1.contact}')  # 홍길동 10세 010-1111-2222
print(f'{p3.name} {p3.age}세 {p3.contact}')  # 홍길동 10세 010-1111-2222

p3.name = "김피카츄"
print(f'{p1.name} {p1.age}세 {p1.contact}')  # 김피카츄 10세 010-1111-2222
print(f'{p3.name} {p3.age}세 {p3.contact}')  # 김피카츄 10세 010-1111-2222
# p3의 정보를 바꾸니 p1의 정보도 같이 바뀌었다. 이는 두 참조변수가 하나의 인스턴스를 참조하고 있기때문이다.
