"""
    < 객체 지향 프로그래밍 (OOP; Object Oriented Programming) >

    - 객체 단위로 프로그램을 설계, 구현
    - 객체는 부품이다!
    - <-> 절차적 프로그래밍

        ** 절차적 프로그래밍 (Procedural Programming)
            - 프로그램의 진행 절차대로 설계, 구현
                장점 : 구현이 쉬움
                단점 : 개발기간이 길다.
                        (분업이 힘들다. 선행되어야 하는 기능이 완성되지 않는다면 다음에 진행할 기능은 먼저 완성할 수 없다.)
                      유지보수가 어렵다.
                        (기능의 추가/삭제가 어렵다.)

    - 기능을 객체에 담는다.
      객체 자체에 관한 작업은 해당 객체 측에서 수행되도록 한다.

    - 객체지향의 목적
        0) 대규모의 팀 작업을 가능하게 한다.

        1) 잘 설계된 객체는 다른 프로그램을 제작할 때도 재사용할 수 있다.

        2) 각 기능들을 독립시켜 기능간의 결합도를 낮춘다. (Loose coupling)
            -> 객체를 교체하여도 다른 객체들에게 영향을 주면 안된다.

        3) 상속
            -> 객체를 확장하여 또다른 객체를 만든다.
               중복되는 기능을 또 정의할 필요가 없다.
               무한한 확장성을 갖는다.

        4) 추상화
            -> 설계단계에서 기능을 전부 구현할 필요 없다.
            -> 같은 역할의 객체라도 세부적인 동작 과정은 각기 다를 수 있다.

        5) 다형성
            -> 객체의 형질은 변할 수 있다.

    - 객체의 구성요소
        필드(멤버변수) : 객체가 소유할 데이터.
        메서드(멤버함수) : 객체의 행동하는 방식.
            사람                   객체
         ----------------------------------------
         이름, 나이, 학교          멤버변수(필드)
         걷는다, 먹는다, 잔다       멤버함수(메서드)


    ** C는 철저한 절차적 언어
    ** Java, C# 은 철저한 객체지향 언어
    ** Python, C++ 은 절차적 방식, 객체 지향 방식을 모두 구현할 수 있다.

"""


